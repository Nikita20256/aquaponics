{"ast":null,"code":"var _jsxFileName = \"C:\\\\aquaponics\\\\frontend\\\\src\\\\components\\\\SensorChart\\\\SensorChart.jsx\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport './SensorChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst SensorChart = ({\n  timestamps,\n  history,\n  historicalData,\n  startDate,\n  endDate\n}) => {\n  const formatDate = dateString => {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    return `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n  };\n  const useHistoricalData = historicalData && startDate && endDate;\n  const chartData = {\n    labels: useHistoricalData ? historicalData.temperature.map(item => formatDate(item.timestamp)) : timestamps,\n    datasets: [{\n      label: 'Temperature (°C)',\n      data: useHistoricalData ? historicalData.temperature.map(item => item.value) : history.map(item => item.temperature),\n      borderColor: 'rgb(255, 99, 132)',\n      backgroundColor: 'rgba(255, 99, 132, 0.5)',\n      tension: 0.1,\n      borderWidth: 2,\n      pointRadius: ctx => {\n        var _history$index, _history$index2;\n        const index = ctx.dataIndex;\n        return ((_history$index = history[index]) === null || _history$index === void 0 ? void 0 : _history$index.humidity) === null && ((_history$index2 = history[index]) === null || _history$index2 === void 0 ? void 0 : _history$index2.light) === null ? 6 : 3;\n      }\n    }, {\n      label: 'Humidity (%)',\n      data: useHistoricalData ? historicalData.humidity.map(item => item.value) : history.map(item => item.humidity),\n      borderColor: 'rgb(54, 162, 235)',\n      backgroundColor: 'rgba(54, 162, 235, 0.5)',\n      tension: 0.1,\n      borderWidth: 2,\n      pointRadius: ctx => {\n        var _history$index3, _history$index4;\n        const index = ctx.dataIndex;\n        return ((_history$index3 = history[index]) === null || _history$index3 === void 0 ? void 0 : _history$index3.temperature) === null && ((_history$index4 = history[index]) === null || _history$index4 === void 0 ? void 0 : _history$index4.light) === null ? 6 : 3;\n      }\n    }, {\n      label: 'Light Level',\n      data: useHistoricalData ? historicalData.light.map(item => item.value) : history.map(item => item.light),\n      borderColor: 'rgb(255, 206, 86)',\n      backgroundColor: 'rgba(255, 206, 86, 0.5)',\n      tension: 0.1,\n      borderWidth: 2,\n      pointRadius: ctx => {\n        var _history$index5, _history$index6;\n        const index = ctx.dataIndex;\n        return ((_history$index5 = history[index]) === null || _history$index5 === void 0 ? void 0 : _history$index5.temperature) === null && ((_history$index6 = history[index]) === null || _history$index6 === void 0 ? void 0 : _history$index6.humidity) === null ? 6 : 3;\n      }\n    }]\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          font: {\n            size: 12\n          }\n        }\n      },\n      title: {\n        display: true,\n        text: useHistoricalData ? `График показателей с ${startDate.toLocaleString()} по ${endDate.toLocaleString()}` : 'График текущих показателей',\n        font: {\n          size: 16\n        }\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: false\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sensor-chart\",\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_c = SensorChart;\nexport default SensorChart;\nvar _c;\n$RefreshReg$(_c, \"SensorChart\");","map":{"version":3,"names":["React","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","SensorChart","timestamps","history","historicalData","startDate","endDate","formatDate","dateString","date","Date","getHours","getMinutes","getSeconds","useHistoricalData","chartData","labels","temperature","map","item","timestamp","datasets","label","data","value","borderColor","backgroundColor","tension","borderWidth","pointRadius","ctx","_history$index","_history$index2","index","dataIndex","humidity","light","_history$index3","_history$index4","_history$index5","_history$index6","options","responsive","maintainAspectRatio","plugins","legend","position","font","size","title","display","text","toLocaleString","scales","y","beginAtZero","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/aquaponics/frontend/src/components/SensorChart/SensorChart.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport './SensorChart.css';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst SensorChart = ({ timestamps, history, historicalData, startDate, endDate }) => {\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return '';\r\n    const date = new Date(dateString);\r\n    return `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\r\n  };\r\n\r\n  const useHistoricalData = historicalData && startDate && endDate;\r\n  \r\n  const chartData = {\r\n    labels: useHistoricalData \r\n      ? historicalData.temperature.map(item => formatDate(item.timestamp))\r\n      : timestamps,\r\n    datasets: [\r\n      {\r\n        label: 'Temperature (°C)',\r\n        data: useHistoricalData \r\n          ? historicalData.temperature.map(item => item.value)\r\n          : history.map(item => item.temperature),\r\n        borderColor: 'rgb(255, 99, 132)',\r\n        backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n        tension: 0.1,\r\n        borderWidth: 2,\r\n        pointRadius: (ctx) => {\r\n          const index = ctx.dataIndex;\r\n          return history[index]?.humidity === null && history[index]?.light === null ? 6 : 3;\r\n        }\r\n      },\r\n      {\r\n        label: 'Humidity (%)',\r\n        data: useHistoricalData \r\n          ? historicalData.humidity.map(item => item.value)\r\n          : history.map(item => item.humidity),\r\n        borderColor: 'rgb(54, 162, 235)',\r\n        backgroundColor: 'rgba(54, 162, 235, 0.5)',\r\n        tension: 0.1,\r\n        borderWidth: 2,\r\n        pointRadius: (ctx) => {\r\n          const index = ctx.dataIndex;\r\n          return history[index]?.temperature === null && history[index]?.light === null ? 6 : 3;\r\n        }\r\n      },\r\n      {\r\n        label: 'Light Level',\r\n        data: useHistoricalData \r\n          ? historicalData.light.map(item => item.value)\r\n          : history.map(item => item.light),\r\n        borderColor: 'rgb(255, 206, 86)',\r\n        backgroundColor: 'rgba(255, 206, 86, 0.5)',\r\n        tension: 0.1,\r\n        borderWidth: 2,\r\n        pointRadius: (ctx) => {\r\n          const index = ctx.dataIndex;\r\n          return history[index]?.temperature === null && history[index]?.humidity === null ? 6 : 3;\r\n        }\r\n      }\r\n    ]\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n        labels: {\r\n          font: {\r\n            size: 12\r\n          }\r\n        }\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: useHistoricalData \r\n          ? `График показателей с ${startDate.toLocaleString()} по ${endDate.toLocaleString()}`\r\n          : 'График текущих показателей',\r\n        font: {\r\n          size: 16\r\n        }\r\n      },\r\n    },\r\n    scales: {\r\n      y: {\r\n        beginAtZero: false\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sensor-chart\">\r\n      <Line options={options} data={chartData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SensorChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
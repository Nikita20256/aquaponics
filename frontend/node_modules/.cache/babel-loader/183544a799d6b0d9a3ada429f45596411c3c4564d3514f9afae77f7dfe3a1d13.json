{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ilya\\\\Desktop\\\\labi\\\\2 \\u043A\\u0443\\u0440\\u0441\\\\\\u0413\\u041F\\u041E\\\\frontik\\\\aquaponics-frontend\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const [data, setData] = useState({\n    temperature: 0,\n    humidity: 0,\n    light: 0\n  });\n  const [deviceId, setDeviceId] = useState('');\n  useEffect(() => {\n    // Получаем device_id из localStorage (или другого места, где он хранится после авторизации)\n    const userDeviceId = localStorage.getItem('device_id'); // предполагается, что device_id сохранен в localStorage\n    if (userDeviceId) {\n      setDeviceId(userDeviceId); // Устанавливаем deviceId, если он найден в localStorage\n    }\n  }, []); // Пустой массив зависимостей, чтобы выполнять только один раз при монтировании компонента\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!deviceId) return; // если device_id нет, не делаем запрос\n\n      try {\n        // Запросы к API для получения данных\n        const [tempRes, humRes, lightRes] = await Promise.all([axios.get(`http://localhost:3000/data/temperature?device_id=${deviceId}`), axios.get(`http://localhost:3000/data/humidity?device_id=${deviceId}`), axios.get(`http://localhost:3000/data/light?device_id=${deviceId}`)]);\n\n        // Обновление состояния данными с сервера\n        setData({\n          temperature: tempRes.data.value,\n          // предполагается, что данные возвращаются в виде объекта с полем value\n          humidity: humRes.data.value,\n          light: lightRes.data.value\n        });\n      } catch (err) {\n        console.error('Error fetching data:', err);\n      }\n    };\n    if (deviceId) {\n      fetchData();\n      const interval = setInterval(fetchData, 10000); // Обновление данных каждые 10 секунд\n      return () => clearInterval(interval); // Очистка интервала при размонтировании компонента\n    }\n  }, [deviceId]); // Зависимость от deviceId, чтобы запросы выполнялись при изменении deviceId\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-4xl text-black text-center mb-6\",\n      children: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u0435\\u043B\\u0438 \\u0432\\u0430\\u0448\\u0435\\u0433\\u043E \\u0443\\u0441\\u0442\\u0440\\u043E\\u0439\\u0441\\u0442\\u0432\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-3 gap-6 mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dark-green p-4 rounded-lg text-white text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u0422\\u0435\\u043C\\u043F\\u0435\\u0440\\u0430\\u0442\\u0443\\u0440\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [data.temperature, \" \\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dark-green p-4 rounded-lg text-white text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u0421\\u0432\\u0435\\u0442\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [data.light, \" lux\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dark-green p-4 rounded-lg text-white text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u0412\\u043B\\u0430\\u0436\\u043D\\u043E\\u0441\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [data.humidity, \" %\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"1dHUHk9P0+9vXX/X8ywsKLCD7zQ=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useState","useEffect","axios","jsxDEV","_jsxDEV","Dashboard","_s","data","setData","temperature","humidity","light","deviceId","setDeviceId","userDeviceId","localStorage","getItem","fetchData","tempRes","humRes","lightRes","Promise","all","get","value","err","console","error","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Ilya/Desktop/labi/2 курс/ГПО/frontik/aquaponics-frontend/src/components/Dashboard.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Dashboard() {\r\n  const [data, setData] = useState({ temperature: 0, humidity: 0, light: 0 });\r\n  const [deviceId, setDeviceId] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Получаем device_id из localStorage (или другого места, где он хранится после авторизации)\r\n    const userDeviceId = localStorage.getItem('device_id'); // предполагается, что device_id сохранен в localStorage\r\n    if (userDeviceId) {\r\n      setDeviceId(userDeviceId);  // Устанавливаем deviceId, если он найден в localStorage\r\n    }\r\n  }, []); // Пустой массив зависимостей, чтобы выполнять только один раз при монтировании компонента\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (!deviceId) return; // если device_id нет, не делаем запрос\r\n\r\n      try {\r\n        // Запросы к API для получения данных\r\n        const [tempRes, humRes, lightRes] = await Promise.all([\r\n          axios.get(`http://localhost:3000/data/temperature?device_id=${deviceId}`),\r\n          axios.get(`http://localhost:3000/data/humidity?device_id=${deviceId}`),\r\n          axios.get(`http://localhost:3000/data/light?device_id=${deviceId}`),\r\n        ]);\r\n\r\n        // Обновление состояния данными с сервера\r\n        setData({\r\n          temperature: tempRes.data.value, // предполагается, что данные возвращаются в виде объекта с полем value\r\n          humidity: humRes.data.value,\r\n          light: lightRes.data.value,\r\n        });\r\n      } catch (err) {\r\n        console.error('Error fetching data:', err);\r\n      }\r\n    };\r\n\r\n    if (deviceId) {\r\n      fetchData();\r\n      const interval = setInterval(fetchData, 10000); // Обновление данных каждые 10 секунд\r\n      return () => clearInterval(interval); // Очистка интервала при размонтировании компонента\r\n    }\r\n  }, [deviceId]); // Зависимость от deviceId, чтобы запросы выполнялись при изменении deviceId\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h1 className=\"text-4xl text-black text-center mb-6\">Показатели вашего устройства</h1>\r\n      <div className=\"grid grid-cols-3 gap-6 mb-6\">\r\n        <div className=\"dark-green p-4 rounded-lg text-white text-center\">\r\n          <p>Температура</p>\r\n          <p>{data.temperature} °C</p>\r\n        </div>\r\n        <div className=\"dark-green p-4 rounded-lg text-white text-center\">\r\n          <p>Свет</p>\r\n          <p>{data.light} lux</p>\r\n        </div>\r\n        <div className=\"dark-green p-4 rounded-lg text-white text-center\">\r\n          <p>Влажность</p>\r\n          <p>{data.humidity} %</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
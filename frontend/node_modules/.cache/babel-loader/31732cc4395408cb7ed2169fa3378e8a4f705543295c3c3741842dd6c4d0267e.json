{"ast":null,"code":"var _jsxFileName = \"C:\\\\aquaponics\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Temperature from './components/Temperature/temperature';\nimport Humidity from './components/Humidity/Humidity';\nimport LightIntensity from './components/LightIntensity/LightIntensity';\nimport SensorChart from './components/SensorChart/SensorChart';\n\n// Конфигурация API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_CONFIG = {\n  baseURL: 'http://172.16.22.225:3000',\n  endpoints: {\n    temperature: '/temperature',\n    humidity: '/humidity',\n    lightLevel: '/lightlevel'\n  },\n  refreshInterval: 3000,\n  // 3 секунды\n  maxHistoryLength: 10 // Максимальное количество записей в истории\n};\nfunction App() {\n  _s();\n  const [sensorData, setSensorData] = useState({\n    temperature: 0,\n    humidity: 0,\n    lightLevel: 0\n  });\n  const [history, setHistory] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Форматирование текущего времени\n  const getCurrentTimeString = () => {\n    const now = new Date();\n    return `${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`;\n  };\n\n  // Получение данных с сервера\n  const fetchAllData = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const [tempResponse, humidResponse, lightResponse] = await Promise.all([axios.get(API_CONFIG.endpoints.temperature, {\n        baseURL: API_CONFIG.baseURL\n      }), axios.get(API_CONFIG.endpoints.humidity, {\n        baseURL: API_CONFIG.baseURL\n      }), axios.get(API_CONFIG.endpoints.lightLevel, {\n        baseURL: API_CONFIG.baseURL\n      })]);\n      const newData = {\n        temperature: tempResponse.data.temperature,\n        humidity: humidResponse.data.humidity,\n        lightLevel: lightResponse.data.light\n      };\n      setSensorData(newData);\n\n      // Обновляем историю данных\n      setHistory(prevHistory => {\n        const newHistory = [...prevHistory, {\n          time: getCurrentTimeString(),\n          ...newData\n        }];\n\n        // Сохраняем только последние N записей\n        return newHistory.slice(-API_CONFIG.maxHistoryLength);\n      });\n    } catch (err) {\n      console.error('Error fetching sensor data:', err);\n      setError('Failed to fetch sensor data. Please try again later.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    // Первоначальная загрузка данных\n    fetchAllData();\n\n    // Устанавливаем интервал для обновления данных\n    const intervalId = setInterval(fetchAllData, API_CONFIG.refreshInterval);\n\n    // Очистка интервала при размонтировании компонента\n    return () => clearInterval(intervalId);\n  }, [fetchAllData]);\n\n  // Извлекаем временные метки для графика\n  const timestamps = history.map(entry => entry.time);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sensors-container\",\n      children: [/*#__PURE__*/_jsxDEV(Temperature, {\n        temperature: sensorData.temperature,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Humidity, {\n        humidity: sensorData.humidity,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LightIntensity, {\n        lightLevel: sensorData.lightLevel,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SensorChart, {\n      timestamps: timestamps,\n      history: history,\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"gR086w3NZHegUbZLiOLiQXIQuUs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","Temperature","Humidity","LightIntensity","SensorChart","jsxDEV","_jsxDEV","API_CONFIG","baseURL","endpoints","temperature","humidity","lightLevel","refreshInterval","maxHistoryLength","App","_s","sensorData","setSensorData","history","setHistory","isLoading","setIsLoading","error","setError","getCurrentTimeString","now","Date","getHours","getMinutes","getSeconds","fetchAllData","tempResponse","humidResponse","lightResponse","Promise","all","get","newData","data","light","prevHistory","newHistory","time","slice","err","console","intervalId","setInterval","clearInterval","timestamps","map","entry","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/aquaponics/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport Temperature from './components/Temperature/temperature';\r\nimport Humidity from './components/Humidity/Humidity';\r\nimport LightIntensity from './components/LightIntensity/LightIntensity';\r\nimport SensorChart from './components/SensorChart/SensorChart';\r\n\r\n// Конфигурация API\r\nconst API_CONFIG = {\r\n  baseURL: 'http://172.16.22.225:3000',\r\n  endpoints: {\r\n    temperature: '/temperature',\r\n    humidity: '/humidity',\r\n    lightLevel: '/lightlevel'\r\n  },\r\n  refreshInterval: 3000, // 3 секунды\r\n  maxHistoryLength: 10 // Максимальное количество записей в истории\r\n};\r\n\r\nfunction App() {\r\n  const [sensorData, setSensorData] = useState({\r\n    temperature: 0,\r\n    humidity: 0,\r\n    lightLevel: 0\r\n  });\r\n  const [history, setHistory] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Форматирование текущего времени\r\n  const getCurrentTimeString = () => {\r\n    const now = new Date();\r\n    return `${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`;\r\n  };\r\n\r\n  // Получение данных с сервера\r\n  const fetchAllData = useCallback(async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      const [tempResponse, humidResponse, lightResponse] = await Promise.all([\r\n        axios.get(API_CONFIG.endpoints.temperature, { baseURL: API_CONFIG.baseURL }),\r\n        axios.get(API_CONFIG.endpoints.humidity, { baseURL: API_CONFIG.baseURL }),\r\n        axios.get(API_CONFIG.endpoints.lightLevel, { baseURL: API_CONFIG.baseURL })\r\n      ]);\r\n      \r\n      const newData = {\r\n        temperature: tempResponse.data.temperature,\r\n        humidity: humidResponse.data.humidity,\r\n        lightLevel: lightResponse.data.light\r\n      };\r\n      \r\n      setSensorData(newData);\r\n      \r\n      // Обновляем историю данных\r\n      setHistory(prevHistory => {\r\n        const newHistory = [...prevHistory, {\r\n          time: getCurrentTimeString(),\r\n          ...newData\r\n        }];\r\n        \r\n        // Сохраняем только последние N записей\r\n        return newHistory.slice(-API_CONFIG.maxHistoryLength);\r\n      });\r\n      \r\n    } catch (err) {\r\n      console.error('Error fetching sensor data:', err);\r\n      setError('Failed to fetch sensor data. Please try again later.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Первоначальная загрузка данных\r\n    fetchAllData();\r\n    \r\n    // Устанавливаем интервал для обновления данных\r\n    const intervalId = setInterval(fetchAllData, API_CONFIG.refreshInterval);\r\n    \r\n    // Очистка интервала при размонтировании компонента\r\n    return () => clearInterval(intervalId);\r\n  }, [fetchAllData]);\r\n\r\n  // Извлекаем временные метки для графика\r\n  const timestamps = history.map(entry => entry.time);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {error && (\r\n        <div className=\"error-message\">\r\n          {error}\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"sensors-container\">\r\n        <Temperature \r\n          temperature={sensorData.temperature} \r\n          isLoading={isLoading}\r\n        />\r\n        <Humidity \r\n          humidity={sensorData.humidity} \r\n          isLoading={isLoading}\r\n        />\r\n        <LightIntensity \r\n          lightLevel={sensorData.lightLevel} \r\n          isLoading={isLoading}\r\n        />\r\n      </div>\r\n      \r\n      <SensorChart \r\n        timestamps={timestamps} \r\n        history={history} \r\n        isLoading={isLoading}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
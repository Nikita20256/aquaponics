{"ast":null,"code":"var _jsxFileName = \"C:\\\\aquaponics\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Temperature from './components/Temperature/temperature';\nimport Humidity from './components/Humidity/Humidity';\nimport LightIntensity from './components/LightIntensity/LightIntensity';\nimport SensorChart from './components/SensorChart/SensorChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [temperature, setTemperature] = useState(0);\n  const [humidity, setHumidity] = useState(0);\n  const [lightLevel, setLightLevel] = useState(0);\n  const [historicalData, setHistoricalData] = useState(null);\n  const [timeRange, setTimeRange] = useState({\n    startDate: new Date(Date.now() - 24 * 60 * 60 * 1000),\n    // 24 часа назад\n    endDate: new Date()\n  });\n\n  // Функция для получения исторических данных\n  const fetchHistoricalData = async (start, end) => {\n    try {\n      const [tempData, humidData, lightData] = await Promise.all([axios.get(`http://172.16.22.225:3000/data/temperature?start=${start.toISOString()}&end=${end.toISOString()}`), axios.get(`http://172.16.22.225:3000/data/humidity?start=${start.toISOString()}&end=${end.toISOString()}`), axios.get(`http://172.16.22.225:3000/data/light?start=${start.toISOString()}&end=${end.toISOString()}`)]);\n      setHistoricalData({\n        temperature: tempData.data,\n        humidity: humidData.data,\n        light: lightData.data\n      });\n    } catch (error) {\n      console.error('Error fetching historical data:', error);\n    }\n  };\n\n  // Функция для получения текущих данных\n  const fetchCurrentData = async () => {\n    try {\n      const [tempResponse, humidResponse, lightResponse] = await Promise.all([axios.get('http://172.16.22.225:3000/temperature'), axios.get('http://172.16.22.225:3000/humidity'), axios.get('http://172.16.22.225:3000/lightlevel')]);\n      setTemperature(tempResponse.data.temperature);\n      setHumidity(humidResponse.data.humidity);\n      setLightLevel(lightResponse.data.light);\n    } catch (error) {\n      console.error('Error fetching current data:', error);\n    }\n  };\n\n  // Обработчик изменения диапазона времени\n  const handleTimeRangeChange = (newStartDate, newEndDate) => {\n    setTimeRange({\n      startDate: newStartDate,\n      endDate: newEndDate\n    });\n    fetchHistoricalData(newStartDate, newEndDate);\n  };\n  useEffect(() => {\n    // Загружаем текущие данные сразу и каждые 3 секунды\n    fetchCurrentData();\n    const currentDataInterval = setInterval(fetchCurrentData, 3000);\n\n    // Загружаем исторические данные при монтировании\n    fetchHistoricalData(timeRange.startDate, timeRange.endDate);\n    return () => {\n      clearInterval(currentDataInterval);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sensors-container\",\n      children: [/*#__PURE__*/_jsxDEV(Temperature, {\n        temperature: temperature\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Humidity, {\n        humidity: humidity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LightIntensity, {\n        lightLevel: lightLevel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SensorChart, {\n      historicalData: historicalData,\n      startDate: timeRange.startDate,\n      endDate: timeRange.endDate,\n      onTimeRangeChange: handleTimeRangeChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ImcItA31/vS3/hSy/Hf1195oaXo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","Temperature","Humidity","LightIntensity","SensorChart","jsxDEV","_jsxDEV","App","_s","temperature","setTemperature","humidity","setHumidity","lightLevel","setLightLevel","historicalData","setHistoricalData","timeRange","setTimeRange","startDate","Date","now","endDate","fetchHistoricalData","start","end","tempData","humidData","lightData","Promise","all","get","toISOString","data","light","error","console","fetchCurrentData","tempResponse","humidResponse","lightResponse","handleTimeRangeChange","newStartDate","newEndDate","currentDataInterval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onTimeRangeChange","_c","$RefreshReg$"],"sources":["C:/aquaponics/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport Temperature from './components/Temperature/temperature';\r\nimport Humidity from './components/Humidity/Humidity';\r\nimport LightIntensity from './components/LightIntensity/LightIntensity';\r\nimport SensorChart from './components/SensorChart/SensorChart';\r\n\r\nfunction App() {\r\n  const [temperature, setTemperature] = useState(0);\r\n  const [humidity, setHumidity] = useState(0);\r\n  const [lightLevel, setLightLevel] = useState(0);\r\n  const [historicalData, setHistoricalData] = useState(null);\r\n  const [timeRange, setTimeRange] = useState({\r\n    startDate: new Date(Date.now() - 24 * 60 * 60 * 1000), // 24 часа назад\r\n    endDate: new Date()\r\n  });\r\n\r\n  // Функция для получения исторических данных\r\n  const fetchHistoricalData = async (start, end) => {\r\n    try {\r\n      const [tempData, humidData, lightData] = await Promise.all([\r\n        axios.get(`http://172.16.22.225:3000/data/temperature?start=${start.toISOString()}&end=${end.toISOString()}`),\r\n        axios.get(`http://172.16.22.225:3000/data/humidity?start=${start.toISOString()}&end=${end.toISOString()}`),\r\n        axios.get(`http://172.16.22.225:3000/data/light?start=${start.toISOString()}&end=${end.toISOString()}`)\r\n      ]);\r\n      \r\n      setHistoricalData({\r\n        temperature: tempData.data,\r\n        humidity: humidData.data,\r\n        light: lightData.data\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching historical data:', error);\r\n    }\r\n  };\r\n\r\n  // Функция для получения текущих данных\r\n  const fetchCurrentData = async () => {\r\n    try {\r\n      const [tempResponse, humidResponse, lightResponse] = await Promise.all([\r\n        axios.get('http://172.16.22.225:3000/temperature'),\r\n        axios.get('http://172.16.22.225:3000/humidity'),\r\n        axios.get('http://172.16.22.225:3000/lightlevel')\r\n      ]);\r\n      \r\n      setTemperature(tempResponse.data.temperature);\r\n      setHumidity(humidResponse.data.humidity);\r\n      setLightLevel(lightResponse.data.light);\r\n    } catch (error) {\r\n      console.error('Error fetching current data:', error);\r\n    }\r\n  };\r\n\r\n  // Обработчик изменения диапазона времени\r\n  const handleTimeRangeChange = (newStartDate, newEndDate) => {\r\n    setTimeRange({\r\n      startDate: newStartDate,\r\n      endDate: newEndDate\r\n    });\r\n    fetchHistoricalData(newStartDate, newEndDate);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Загружаем текущие данные сразу и каждые 3 секунды\r\n    fetchCurrentData();\r\n    const currentDataInterval = setInterval(fetchCurrentData, 3000);\r\n    \r\n    // Загружаем исторические данные при монтировании\r\n    fetchHistoricalData(timeRange.startDate, timeRange.endDate);\r\n    \r\n    return () => {\r\n      clearInterval(currentDataInterval);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"sensors-container\">\r\n        <Temperature temperature={temperature}/>\r\n        <Humidity humidity={humidity}/>\r\n        <LightIntensity lightLevel={lightLevel}/>\r\n      </div>\r\n      <SensorChart \r\n        historicalData={historicalData}\r\n        startDate={timeRange.startDate}\r\n        endDate={timeRange.endDate}\r\n        onTimeRangeChange={handleTimeRangeChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}